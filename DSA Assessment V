import java.util.Scanner;

class CircularQueue {
    private int[] queue;
    private int front, rear, size, max;

    public CircularQueue(int max) {
        this.max = max;
        queue = new int[max];
        front = 0;
        rear = -1;
        size = 0;
    }

    public void enqueue(int data) {
        if (isFull()) {
            System.out.println("Queue is Full! Cannot insert " + data);
            return;
        }
        rear = (rear + 1) % max;
        queue[rear] = data;
        size++;
        System.out.println(data + " inserted");
    }

    public int dequeue() {
        if (isEmpty()) {
            System.out.println("Queue is Empty! Cannot dequeue");
            return -1;
        }
        int item = queue[front];
        front = (front + 1) % max;
        size--;
        return item;
    }

    public int peek() {
        if (isEmpty()) {
            System.out.println("Queue is Empty!");
            return -1;
        }
        return queue[front];
    }

    public boolean isEmpty() {
        return size == 0;
    }

    public boolean isFull() {
        return size == max;
    }

    public void display() {
        if (isEmpty()) {
            System.out.println("Queue is Empty!");
            return;
        }
        System.out.print("Queue: ");
        for (int i = 0; i < size; i++) {
            System.out.print(queue[(front + i) % max] + " ");
        }
        System.out.println();
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter size of Circular Queue: ");
        int n = sc.nextInt();

        CircularQueue cq = new CircularQueue(n);

        cq.enqueue(10);
        cq.enqueue(20);
        cq.enqueue(30);
        cq.display();

        System.out.println("Dequeued: " + cq.dequeue());
        cq.display();

        cq.enqueue(40);
        cq.enqueue(50);
        cq.display();

        System.out.println("Peek: " + cq.peek());
    }
}
